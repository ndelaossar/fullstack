# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Deploy Fullstack app

on:
  push:
    branches:
      - devel
      - stage
      - prod

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "15.x"

      - name: Install dependencies
        run: npm ci

      - name: Linter (ESLint)
        run: npm run lint

      - name: Formatter (Prettier)
        run: npm run lint

      - name: Test (Jest)
        run: CI=true npm run test

      - name: Build npm run build
        run: npm run build

      - uses: actions/upload-artifact@v4
        with:
          name: nodejs-build
          path: build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set ENVIRONMENT
        run: |
          if [[ ! "${GITHUB_REF#refs/heads/}" =~ ^(devel|stage|prod) ]]; then
              echo "TF_ENV=$(echo ${GITHUB_REF#refs/heads/} )" >> $GITHUB_ENV
          else
            echo "Only allow deployments from devel| stage | prod "
            exit 0
          fi

      - uses: actions/download-artifact@v4
        with:
          name: nodejs-build
          path: terraform/nodejs-build/

      - name: Display structure of downloaded files
        run: ls -R

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform create workspace for devel
        run: |
          terraform workspace select -or-create "${{ env.TF_ENV }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -var env_tf="${{ env.TF_ENV }}"

      - name: Terraform Apply
        run: |
          terraform apply -no-color -var env_tf="${{ env.TF_ENV }}" -auto-approve
